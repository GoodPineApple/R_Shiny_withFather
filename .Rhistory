install.packages('fromJSON')
install.packages('jsonlite')
install.packages("jsonlite")
install.packages("jsonlite")
install.packages("jsonlite")
library(leaflet)
library(sp)
library(geojsonio)
library(jsonlite)
install.packages("jsonlite")
install.packages("jsonlite")
library(leaflet)
library(sp)
library(geojsonio)
library(jsonlite)
# Define UI for application that draws a histogram
ui <- fluidPage(
titlePanel(
leafletOutput("theMap", height = 1000)
)
)
library(shiny)
library(leaflet)
library(sp)
library(geojsonio)
library(jsonlite)
# Define UI for application that draws a histogram
ui <- fluidPage(
titlePanel(
leafletOutput("theMap", height = 1000)
)
)
server <- function(input, output){
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
# mhSPDF <- geojsonio::geojson_read("resources/TL_SCCO_EMD0.geojson", what = "sp")
mhSPDF <- readLines("resources/TL_SCCO_EMD0.geojson", warn = FALSE) %>%
paste(collapse = "\n") %>%
fromJSON(simplifyVector = FALSE)
#df = data.frame(Lat = 1:10, Long = rnorm(10))
output$theMap <- renderLeaflet({
leaflet(options = leafletOptions(
maxZoom=14, minZoom=9, attributionControl = T
)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik,
options = providerTileOptions(noWrap = TRUE)
) %>%
setView(127.38, 36.35, 6) %>%
addPolygons(data = mhSPDF, opacity = 5,
# label = ~NAME_2, weight = 1,
# fillColor = ~cols(NAME_2))
label = ~adm_cd, weight = 1,
fillColor = ~cols(adm_cd))
})
}
shinyApp(ui=ui, server=server)
RStudio.Version()
version
library(shiny)
library(leaflet)
library(sp)
library(geojsonio)
library(jsonlite)
# Define UI for application that draws a histogram
ui <- fluidPage(
titlePanel(
leafletOutput("theMap", height = 1000)
)
)
server <- function(input, output){
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
# mhSPDF <- geojsonio::geojson_read("resources/TL_SCCO_EMD0.geojson", what = "sp")
mhSPDF <- readLines("resources/TL_SCCO_EMD0.geojson", warn = FALSE) %>%
paste(collapse = "\n") %>%
fromJSON(simplifyVector = FALSE)
#df = data.frame(Lat = 1:10, Long = rnorm(10))
output$theMap <- renderLeaflet({
leaflet(options = leafletOptions(
maxZoom=14, minZoom=9, attributionControl = T
)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik,
options = providerTileOptions(noWrap = TRUE)
) %>%
setView(127.38, 36.35, 6) %>%
addPolygons(data = mhSPDF, opacity = 5,
# label = ~NAME_2, weight = 1,
# fillColor = ~cols(NAME_2))
label = ~adm_cd, weight = 1,
fillColor = ~cols(adm_cd))
})
}
shinyApp(ui=ui, server=server)
mhSPDF <- readLines("resources/TL_SCCO_EMD0.geojson", warn = FALSE) %>%
paste(collapse = "\n") %>%
View(mhSPDF)
print(mhSPDF)
mhSPDF <- readLines("resources/TL_SCCO_EMD0.geojson", warn = FALSE) %>%
paste(collapse = "\n") %>%
fromJSON(simplifyVector = FALSE)
View(mhSPDF)
mhSPDF[["features"]]
library(leaflet)
library(sp)
library(geojsonio)
# Define UI for application that draws a histogram
ui <- fluidPage(
titlePanel(
leafletOutput("theMap", height = 1000)
)
)
server <- function(input, output){
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
mhSPDF <- geojsonio::geojson_read("resources/TL_SCCO_EMD0.geojson", what = "sp")
#df = data.frame(Lat = 1:10, Long = rnorm(10))
output$theMap <- renderLeaflet({
leaflet(options = leafletOptions(
maxZoom=14, minZoom=9, attributionControl = T
)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik,
options = providerTileOptions(noWrap = TRUE)
) %>%
setView(127.38, 36.35, 6) %>%
addPolygons(data = mhSPDF, opacity = 5,
# label = ~NAME_2, weight = 1,
# fillColor = ~cols(NAME_2))
label = ~adm_cd, weight = 1,
fillColor = ~cols(adm_cd))
})
}
shinyApp(ui=ui, server=server)
version
library(leaflet)
library(sp)
library(geojsonio)
options(encoding = "UTF-8")
# mhSPDF <- geojsonio::geojson_read(url, what = "sp")
mhSPDF <- geojsonio::geojson_read("resources/TL_SCCO_EMD0.geojson", what = "sp")
#cols <- colorFactor(topo.colors(nrow(mhSPDF)), mhSPDF$NAME_2)
cols <- colorFactor(topo.colors(nrow(mhSPDF)), mhSPDF$adm_cd)
leaflet() %>% addProviderTiles(providers$Stamen.TonerLite) %>%
setView(127.38, 36.35, 6) %>%
addPolygons(data = mhSPDF, opacity = 5,
# label = ~NAME_2, weight = 1,
# fillColor = ~cols(NAME_2))
label = ~adm_cd, weight = 1,
fillColor = ~cols(adm_cd))
library(leaflet)
library(sp)
library(geojsonio)
# Define UI for application that draws a histogram
ui <- fluidPage(
titlePanel(
leafletOutput("theMap", height = 1000)
)
)
server <- function(input, output){
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
mhSPDF <- geojsonio::geojson_read("resources/TL_SCCO_EMD0.geojson", what = "sp")
#df = data.frame(Lat = 1:10, Long = rnorm(10))
output$theMap <- renderLeaflet({
leaflet(options = leafletOptions(
maxZoom=14, minZoom=9, attributionControl = T
)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik,
options = providerTileOptions(noWrap = TRUE)
) %>%
setView(127.38, 36.35, 6) %>%
addPolygons(data = mhSPDF, opacity = 5,
# label = ~NAME_2, weight = 1,
# fillColor = ~cols(NAME_2))
label = ~adm_cd, weight = 1)
})
}
shinyApp(ui=ui, server=server)
library(leaflet)
library(sp)
library(geojsonio)
options(encoding = "UTF-8")
# mhSPDF <- geojsonio::geojson_read(url, what = "sp")
mhSPDF <- geojsonio::geojson_read("resources/TL_SCCO_EMD0.geojson", what = "sp")
#cols <- colorFactor(topo.colors(nrow(mhSPDF)), mhSPDF$NAME_2)
cols <- colorFactor(topo.colors(nrow(mhSPDF)), mhSPDF$adm_cd)
leaflet() %>% addProviderTiles(providers$Stamen.TonerLite) %>%
setView(127.38, 36.35, 6) %>%
addPolygons(data = mhSPDF, opacity = 5,
# label = ~NAME_2, weight = 1,
# fillColor = ~cols(NAME_2))
label = ~adm_cd, weight = 1,
fillColor = ~cols(adm_cd))
library(leaflet)
library(sp)
library(geojsonio)
# Define UI for application that draws a histogram
ui <- fluidPage(
titlePanel(
leafletOutput("theMap", height = 1000)
)
)
server <- function(input, output){
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
mhSPDF <- geojsonio::geojson_read("resources/TL_SCCO_EMD0.geojson", what = "sp")
#df = data.frame(Lat = 1:10, Long = rnorm(10))
output$theMap <- renderLeaflet({
leaflet(options = leafletOptions(
maxZoom=14, minZoom=9, attributionControl = T
)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik,
options = providerTileOptions(noWrap = TRUE)
) %>%
setView(127.38, 36.35, 6) %>%
addPolygons(data = mhSPDF, opacity = 5,
# label = ~NAME_2, weight = 1,
# fillColor = ~cols(NAME_2))
label = ~adm_cd, weight = 1,
fillColor = ~cols(adm_cd))
})
}
shinyApp(ui=ui, server=server)
library(leaflet)
library(sp)
library(geojsonio)
# Define UI for application that draws a histogram
ui <- fluidPage(
titlePanel(
leafletOutput("theMap", height = 1000)
)
)
server <- function(input, output){
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
mhSPDF <- geojsonio::geojson_read("resources/TL_SCCO_EMD0.geojson", what = "sp")
#df = data.frame(Lat = 1:10, Long = rnorm(10))
output$theMap <- renderLeaflet({
leaflet(options = leafletOptions(
maxZoom=14, minZoom=11, attributionControl = T
)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik,
options = providerTileOptions(noWrap = TRUE)
) %>%
setView(127.38, 36.35, 6) %>%
addPolygons(data = mhSPDF, opacity = 5,
# label = ~NAME_2, weight = 1,
# fillColor = ~cols(NAME_2))
label = ~adm_cd, weight = 1,
fillColor = ~cols(adm_cd))
})
}
shinyApp(ui=ui, server=server)
library(leaflet)
library(sp)
library(geojsonio)
# Define UI for application that draws a histogram
ui <- fluidPage(
titlePanel(
leafletOutput("theMap", height = 1000)
)
)
server <- function(input, output){
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
mhSPDF <- geojsonio::geojson_read("resources/TL_SCCO_EMD0.geojson", what = "sp")
#df = data.frame(Lat = 1:10, Long = rnorm(10))
output$theMap <- renderLeaflet({
leaflet(options = leafletOptions(
maxZoom=14, minZoom=11, attributionControl = T
)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik,
options = providerTileOptions(noWrap = TRUE)
) %>%
setView(127.38, 36.35, 6) %>%
addPolygons(data = mhSPDF, opacity = 5,
# label = ~NAME_2, weight = 1,
# fillColor = ~cols(NAME_2))
label = ~adm_cd, weight = 1,
fillColor = ~adm_cd)
})
}
shinyApp(ui=ui, server=server)
library(leaflet)
library(sp)
library(geojsonio)
# Define UI for application that draws a histogram
ui <- fluidPage(
titlePanel(
leafletOutput("theMap", height = 1000)
)
)
server <- function(input, output){
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
mhSPDF <- geojsonio::geojson_read("resources/TL_SCCO_EMD0.geojson", what = "sp")
#df = data.frame(Lat = 1:10, Long = rnorm(10))
output$theMap <- renderLeaflet({
leaflet(options = leafletOptions(
maxZoom=14, minZoom=11, attributionControl = T
)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik,
options = providerTileOptions(noWrap = TRUE)
) %>%
setView(127.38, 36.35, 6) %>%
addPolygons(data = mhSPDF, opacity = 10,
# label = ~NAME_2, weight = 1,
# fillColor = ~cols(NAME_2))
label = ~adm_cd, weight = 1,
fillColor = ~adm_cd)
})
}
shinyApp(ui=ui, server=server)
library(leaflet)
library(sp)
library(geojsonio)
# Define UI for application that draws a histogram
ui <- fluidPage(
titlePanel(
leafletOutput("theMap", height = 1000)
)
)
server <- function(input, output){
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
mhSPDF <- geojsonio::geojson_read("resources/TL_SCCO_EMD0.geojson", what = "sp")
#df = data.frame(Lat = 1:10, Long = rnorm(10))
output$theMap <- renderLeaflet({
leaflet(options = leafletOptions(
maxZoom=14, minZoom=11, attributionControl = T
)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik,
options = providerTileOptions(noWrap = TRUE)
) %>%
setView(127.38, 36.35, 6) %>%
addPolygons(data = mhSPDF, opacity = 1000,
# label = ~NAME_2, weight = 1,
# fillColor = ~cols(NAME_2))
label = ~adm_cd, weight = 1,
fillColor = ~adm_cd)
})
}
shinyApp(ui=ui, server=server)
library(leaflet)
library(sp)
library(geojsonio)
# Define UI for application that draws a histogram
ui <- fluidPage(
titlePanel(
leafletOutput("theMap", height = 1000)
)
)
server <- function(input, output){
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
mhSPDF <- geojsonio::geojson_read("resources/TL_SCCO_EMD0.geojson", what = "sp")
#df = data.frame(Lat = 1:10, Long = rnorm(10))
output$theMap <- renderLeaflet({
leaflet(options = leafletOptions(
maxZoom=14, minZoom=11, attributionControl = T
)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik,
options = providerTileOptions(noWrap = TRUE)
) %>%
setView(127.38, 36.35, 6) %>%
addPolygons(data = mhSPDF, opacity = 0,
# label = ~NAME_2, weight = 1,
# fillColor = ~cols(NAME_2))
label = ~adm_cd, weight = 1,
fillColor = ~adm_cd)
})
}
shinyApp(ui=ui, server=server)
library(leaflet)
library(sp)
library(geojsonio)
# Define UI for application that draws a histogram
ui <- fluidPage(
titlePanel(
leafletOutput("theMap", height = 1000)
)
)
server <- function(input, output){
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
mhSPDF <- geojsonio::geojson_read("resources/TL_SCCO_EMD0.geojson", what = "sp")
#df = data.frame(Lat = 1:10, Long = rnorm(10))
output$theMap <- renderLeaflet({
leaflet(options = leafletOptions(
maxZoom=14, minZoom=11, attributionControl = T
)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik,
options = providerTileOptions(noWrap = TRUE)
) %>%
setView(127.38, 36.35, 6) %>%
addPolygons(data = mhSPDF, opacity = 1,
# label = ~NAME_2, weight = 1,
# fillColor = ~cols(NAME_2))
label = ~adm_cd, weight = 1,
fillColor = ~adm_cd)
})
}
shinyApp(ui=ui, server=server)
library(leaflet)
library(sp)
library(geojsonio)
# Define UI for application that draws a histogram
ui <- fluidPage(
titlePanel(
leafletOutput("theMap", height = 1000)
)
)
server <- function(input, output){
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
mhSPDF <- geojsonio::geojson_read("resources/TL_SCCO_EMD0.geojson", what = "sp")
#df = data.frame(Lat = 1:10, Long = rnorm(10))
output$theMap <- renderLeaflet({
leaflet(options = leafletOptions(
maxZoom=14, minZoom=11, attributionControl = T
)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik,
options = providerTileOptions(noWrap = TRUE)
) %>%
setView(127.38, 36.35, 6) %>%
addPolygons(data = mhSPDF, fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
})
}
shinyApp(ui=ui, server=server)
library(leaflet)
library(sp)
library(geojsonio)
# Define UI for application that draws a histogram
ui <- fluidPage(
titlePanel(
leafletOutput("theMap", height = 1000)
)
)
server <- function(input, output){
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
mhSPDF <- geojsonio::geojson_read("resources/TL_SCCO_EMD.geojson", what = "sp")
#df = data.frame(Lat = 1:10, Long = rnorm(10))
output$theMap <- renderLeaflet({
leaflet(options = leafletOptions(
maxZoom=14, minZoom=11, attributionControl = T
)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik,
options = providerTileOptions(noWrap = TRUE)
) %>%
setView(127.38, 36.35, 6) %>%
addPolygons(data = mhSPDF, fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
})
}
shinyApp(ui=ui, server=server)
library(leaflet)
library(sp)
library(geojsonio)
options(encoding = "UTF-8")
# mhSPDF <- geojsonio::geojson_read(url, what = "sp")
mhSPDF <- geojsonio::geojson_read("resources/TL_SCCO_EMD.geojson", what = "sp")
#cols <- colorFactor(topo.colors(nrow(mhSPDF)), mhSPDF$NAME_2)
cols <- colorFactor(topo.colors(nrow(mhSPDF)), mhSPDF$adm_cd)
leaflet() %>% addProviderTiles(providers$Stamen.TonerLite) %>%
setView(127.38, 36.35, 6) %>%
addPolygons(data = mhSPDF, opacity = 5,
# label = ~NAME_2, weight = 1,
# fillColor = ~cols(NAME_2))
label = ~adm_cd, weight = 1,
fillColor = ~cols(adm_cd))
library(leaflet)
library(sp)
library(geojsonio)
options(encoding = "UTF-8")
# mhSPDF <- geojsonio::geojson_read(url, what = "sp")
mhSPDF <- geojsonio::geojson_read("resources/TL_SCCO_EMD0.geojson", what = "sp")
#cols <- colorFactor(topo.colors(nrow(mhSPDF)), mhSPDF$NAME_2)
cols <- colorFactor(topo.colors(nrow(mhSPDF)), mhSPDF$adm_cd)
leaflet() %>% addProviderTiles(providers$Stamen.TonerLite) %>%
setView(127.38, 36.35, 6) %>%
addPolygons(data = mhSPDF, opacity = 5,
# label = ~NAME_2, weight = 1,
# fillColor = ~cols(NAME_2))
label = ~adm_cd, weight = 1,
fillColor = ~cols(adm_cd))
library(leaflet)
library(sp)
library(geojsonio)
options(encoding = "UTF-8")
# mhSPDF <- geojsonio::geojson_read(url, what = "sp")
mhSPDF <- geojsonio::geojson_read("resources/TL_SCCO_EMD0.geojson", what = "sp")
#cols <- colorFactor(topo.colors(nrow(mhSPDF)), mhSPDF$NAME_2)
cols <- colorFactor(topo.colors(nrow(mhSPDF)), mhSPDF$adm_cd)
leaflet() %>% addProviderTiles(providers$Stamen.TonerLite) %>%
setView(127.38, 36.35, 6) %>%
addPolygons(data = mhSPDF, opacity = 5,
# label = ~NAME_2, weight = 1,
# fillColor = ~cols(NAME_2))
label = ~adm_nm, weight = 1,
fillColor = ~cols(adm_cd))
