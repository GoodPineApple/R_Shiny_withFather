leaflet(options = leafletOptions(
)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik,
options = providerTileOptions(noWrap = TRUE)
) %>%
addCircles(data=cctv, radius=10, lng=~LNG, lat=~LAT)
})
}
shinyApp(ui=ui, server=server)
nycounties <- geojsonio::geojson_read("resources/TL_SCCO_EMD.geojson" , what = "sp")
install.packages("geojsonio")
library(geojsonio)
library(geojsonio)
nycounties <- geojsonio::geojson_read("resources/TL_SCCO_EMD.geojson" , what = "sp")
library(shiny)
library(flexdashboard)
library(leaflet)
library(geojsonio)
cctv<-read.csv('resources/cctv_clean.csv',header = T)
nycounties <- geojsonio::geojson_read("resources/TL_SCCO_EMD.geojson" , what = "sp")
View(nycounties)
View(nycounties)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(flexdashboard)
library(leaflet)
library(geojsonio)
cctv<-read.csv('resources/cctv_clean.csv',header = T)
geojson <- geojsonio::geojson_read("resources/TL_SCCO_EMD.geojson" , what = "sp")
ui <- pageWithSidebar(
headerPanel(
flowLayout(
"1","2","3","4"
)
),
mainPanel(
"main panel",
leafletOutput("theMap")
),
navlistPanel(
tabPanel("a",NULL),
tabPanel("a",NULL),
tabPanel("a",NULL)
)
)
server <- function(input, output){
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
pal <- colorNumeric("viridis", NULL)
output$theMap <- leaflet(nycounties) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(log10(pop)),
label = ~paste0(county, ": ", formatC(pop, big.mark = ","))) %>%
addLegend(pal = pal, values = ~log10(pop), opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(10^x)))
}
shinyApp(ui=ui, server=server)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(flexdashboard)
library(leaflet)
library(geojsonio)
cctv<-read.csv('resources/cctv_clean.csv',header = T)
geojson <- geojsonio::geojson_read("resources/TL_SCCO_EMD.json" , what = "sp")
ui <- pageWithSidebar(
headerPanel(
flowLayout(
"1","2","3","4"
)
),
mainPanel(
"main panel",
leafletOutput("theMap")
),
navlistPanel(
tabPanel("a",NULL),
tabPanel("a",NULL),
tabPanel("a",NULL)
)
)
server <- function(input, output){
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
pal <- colorNumeric("viridis", NULL)
output$theMap <- leaflet(nycounties) %>%
addTiles() %>%
addPolygons(
stroke = FALSE,
smoothFactor = 0.3,
fillOpacity = 1,
fillColor = ~pal(log10(pop)),
label = ~paste0(county, ": ", formatC(pop, big.mark = ","))) %>%
addLegend(pal = pal, values = ~log10(pop), opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(10^x)))
}
shinyApp(ui=ui, server=server)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(flexdashboard)
library(leaflet)
library(geojsonio)
cctv<-read.csv('resources/cctv_clean.csv',header = T)
geojson <- geojsonio::geojson_read("resources/TL_SCCO_EMD.json")
spdf <- geojsonio::geojson_sp(geoJson)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(flexdashboard)
library(leaflet)
library(geojsonio)
cctv<-read.csv('resources/cctv_clean.csv',header = T)
geoJson <- geojsonio::geojson_read("resources/TL_SCCO_EMD.json")
spdf <- geojsonio::geojson_sp(geoJson)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(flexdashboard)
library(leaflet)
library(geojsonio)
cctv<-read.csv('resources/cctv_clean.csv',header = T)
geoJson <- geojsonio::geojson_read("resources/TL_SCCO_EMD.json" , what = "sp")
spdf <- geojsonio::geojson_sp(geoJson)
typeof(cctv)
typeof(geoJson)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(flexdashboard)
library(leaflet)
library(geojsonio)
cctv<-read.csv('resources/cctv_clean.csv',header = T)
geoJson <- geojsonio::geojson_read("resources/TL_SCCO_EMD.json" , what = "sp")
ui <- pageWithSidebar(
headerPanel(
flowLayout(
"1","2","3","4"
)
),
mainPanel(
"main panel",
leafletOutput("theMap")
),
navlistPanel(
tabPanel("a",NULL),
tabPanel("a",NULL),
tabPanel("a",NULL)
)
)
server <- function(input, output){
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
pal <- colorNumeric("viridis", NULL)
output$theMap <- leaflet(nycounties) %>%
addTiles() %>%
addPolygons(
stroke = FALSE,
smoothFactor = 0.3,
fillOpacity = 1,
fillColor = ~pal(log10(pop)),
label = ~paste0(county, ": ", formatC(pop, big.mark = ","))) %>%
addLegend(pal = pal, values = ~log10(pop), opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(10^x)))
}
shinyApp(ui=ui, server=server)
library(leaflet)
library(sp)
#' <br/><br/>
#' The V8 part is simply to read the JSON embeded in the Javascript.<br/>
#' For a geojson file `jsonlite::fromfromJSON()` or `geojsonio::regeojson_read()` will do
#'
jsURL <- "https://rawgit.com/Norkart/Leaflet-MiniMap/master/example/local_pubs_restaurant_norway.js"
v8 <- V8::v8()
v8$source(jsURL)
geoJson <- geojsonio::as.json(v8$get("pubsGeoJSON"))
# This is the kicker, convert geojson to a Spatial object.
# This then allows us to use formulas in our markers, polygons etc.
spdf <- geojsonio::geojson_sp(geoJson)
icons <- awesomeIconList(
pub = makeAwesomeIcon(icon = "glass", library = "fa", markerColor = "red"),
restaurant = makeAwesomeIcon(icon = "cutlery", library = "fa", markerColor = "blue")
)
leaflet() %>% addTiles() %>%
setView(10.758276373601069, 59.92448055859924, 13) %>%
addAwesomeMarkers(data = spdf,
label = ~stringr::str_c(amenity, ": ", name),
icon = ~icons[amenity],
options = markerOptions(riseOnHover = TRUE, opacity = 0.75),
group = "pubs")
#' <br/><br/>
#' Another examples this time with polygons
url <- "http://www.partners-popdev.org/wp-content/themes/original-child/vendor/Geojson/States/Maharashtra.geojson"
mhSPDF <- geojsonio::geojson_read(url, what = "sp")
cols <- colorFactor(topo.colors(nrow(mhSPDF)), mhSPDF$NAME_2)
leaflet() %>% addProviderTiles(providers$Stamen.TonerLite) %>%
setView(75.7139, 19.7515, 6) %>%
addPolygons(data = mhSPDF, opacity = 5,
label = ~NAME_2, weight = 1,
fillColor = ~cols(NAME_2))
library(leaflet)
library(sp)
#' <br/><br/>
#' The V8 part is simply to read the JSON embeded in the Javascript.<br/>
#' For a geojson file `jsonlite::fromfromJSON()` or `geojsonio::regeojson_read()` will do
#'
jsURL <- "https://rawgit.com/Norkart/Leaflet-MiniMap/master/example/local_pubs_restaurant_norway.js"
v8 <- V8::v8()
v8$source(jsURL)
geoJson <- geojsonio::as.json(v8$get("pubsGeoJSON"))
# This is the kicker, convert geojson to a Spatial object.
# This then allows us to use formulas in our markers, polygons etc.
spdf <- geojsonio::geojson_sp(geoJson)
icons <- awesomeIconList(
pub = makeAwesomeIcon(icon = "glass", library = "fa", markerColor = "red"),
restaurant = makeAwesomeIcon(icon = "cutlery", library = "fa", markerColor = "blue")
)
leaflet() %>% addTiles() %>%
setView(10.758276373601069, 59.92448055859924, 13) %>%
addAwesomeMarkers(data = spdf,
label = ~stringr::str_c(amenity, ": ", name),
icon = ~icons[amenity],
options = markerOptions(riseOnHover = TRUE, opacity = 0.75),
group = "pubs")
#' <br/><br/>
#' Another examples this time with polygons
url <- "http://www.partners-popdev.org/wp-content/themes/original-child/vendor/Geojson/States/Maharashtra.geojson"
mhSPDF <- geojsonio::geojson_read(url, what = "sp")
cols <- colorFactor(topo.colors(nrow(mhSPDF)), mhSPDF$NAME_2)
leaflet() %>% addProviderTiles(providers$Stamen.TonerLite) %>%
setView(75.7139, 19.7515, 6) %>%
addPolygons(data = mhSPDF, opacity = 5,
label = ~NAME_2, weight = 1,
fillColor = ~cols(NAME_2))
typeof(spdf)
url <- "http://www.partners-popdev.org/wp-content/themes/original-child/vendor/Geojson/States/Maharashtra.geojson"
# mhSPDF <- geojsonio::geojson_read(url, what = "sp")
mhSPDF <- geojsonio::geojson_read("resources/TL_SCCO_EMD.json", what = "sp")
cols <- colorFactor(topo.colors(nrow(mhSPDF)), mhSPDF$NAME_2)
leaflet() %>% addProviderTiles(providers$Stamen.TonerLite) %>%
setView(75.7139, 19.7515, 6) %>%
addPolygons(data = mhSPDF, opacity = 5,
label = ~NAME_2, weight = 1,
fillColor = ~cols(NAME_2))
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(flexdashboard)
library(leaflet)
library(geojsonio)
cctv<-read.csv('resources/cctv_clean.csv',header = T)
geoJson <- geojsonio::geojson_read("resources/TL_SCCO_EMD.json" , what = "sp")
ui <- pageWithSidebar(
headerPanel(
flowLayout(
"1","2","3","4"
)
),
mainPanel(
"main panel",
leafletOutput("theMap")
),
navlistPanel(
tabPanel("a",NULL),
tabPanel("a",NULL),
tabPanel("a",NULL)
)
)
server <- function(input, output){
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
pal <- colorNumeric("viridis", NULL)
output$theMap <- leaflet(nycounties) %>%
addTiles() %>%
addPolygons(
stroke = FALSE,
smoothFactor = 0.3,
fillOpacity = 1,
fillColor = ~pal(log10(pop)),
#label = ~paste0(county, ": ", formatC(pop, big.mark = ","))
) %>%
addLegend(pal = pal, values = ~log10(pop), opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(10^x)))
}
shinyApp(ui=ui, server=server)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(flexdashboard)
library(leaflet)
library(geojsonio)
cctv<-read.csv('resources/cctv_clean.csv',header = T)
geoJson <- geojsonio::geojson_read("resources/TL_SCCO_EMD.json" , what = "sp")
ui <- pageWithSidebar(
headerPanel(
flowLayout(
"1","2","3","4"
)
),
mainPanel(
"main panel",
leafletOutput("theMap")
),
navlistPanel(
tabPanel("a",NULL),
tabPanel("a",NULL),
tabPanel("a",NULL)
)
)
server <- function(input, output){
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
pal <- colorNumeric("viridis", NULL)
output$theMap <- leaflet(nycounties) %>%
addTiles() %>%
addPolygons(
stroke = FALSE,
smoothFactor = 0.3,
fillOpacity = 1,
#fillColor = ~pal(log10(pop)),
#label = ~paste0(county, ": ", formatC(pop, big.mark = ","))
) %>%
# addLegend(pal = pal, values = ~log10(pop),
# opacity = 1.0,
# labFormat = labelFormat(transform = function(x) round(10^x)))
}
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(flexdashboard)
library(leaflet)
library(geojsonio)
cctv<-read.csv('resources/cctv_clean.csv',header = T)
geoJson <- geojsonio::geojson_read("resources/TL_SCCO_EMD.json" , what = "sp")
ui <- pageWithSidebar(
headerPanel(
flowLayout(
"1","2","3","4"
)
),
mainPanel(
"main panel",
leafletOutput("theMap")
),
navlistPanel(
tabPanel("a",NULL),
tabPanel("a",NULL),
tabPanel("a",NULL)
)
)
server <- function(input, output){
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
pal <- colorNumeric("viridis", NULL)
output$theMap <- leaflet(nycounties) %>%
addTiles() %>%
addPolygons(
stroke = FALSE,
smoothFactor = 0.3,
fillOpacity = 1,
#fillColor = ~pal(log10(pop)),
#label = ~paste0(county, ": ", formatC(pop, big.mark = ","))
)
# addLegend(pal = pal, values = ~log10(pop),
# opacity = 1.0,
# labFormat = labelFormat(transform = function(x) round(10^x)))
}
shinyApp(ui=ui, server=server)
library(leaflet)
library(sp)
#' <br/><br/>
#' The V8 part is simply to read the JSON embeded in the Javascript.<br/>
#' For a geojson file `jsonlite::fromfromJSON()` or `geojsonio::regeojson_read()` will do
#'
jsURL <- "https://rawgit.com/Norkart/Leaflet-MiniMap/master/example/local_pubs_restaurant_norway.js"
v8 <- V8::v8()
v8$source(jsURL)
geoJson <- geojsonio::as.json(v8$get("pubsGeoJSON"))
# This is the kicker, convert geojson to a Spatial object.
# This then allows us to use formulas in our markers, polygons etc.
spdf <- geojsonio::geojson_sp(geoJson)
icons <- awesomeIconList(
pub = makeAwesomeIcon(icon = "glass", library = "fa", markerColor = "red"),
restaurant = makeAwesomeIcon(icon = "cutlery", library = "fa", markerColor = "blue")
)
leaflet() %>% addTiles() %>%
setView(10.758276373601069, 59.92448055859924, 13) %>%
addAwesomeMarkers(data = spdf,
label = ~stringr::str_c(amenity, ": ", name),
icon = ~icons[amenity],
options = markerOptions(riseOnHover = TRUE, opacity = 0.75),
group = "pubs")
#' <br/><br/>
#' Another examples this time with polygons
url <- "http://www.partners-popdev.org/wp-content/themes/original-child/vendor/Geojson/States/Maharashtra.geojson"
# mhSPDF <- geojsonio::geojson_read(url, what = "sp")
mhSPDF <- geojsonio::geojson_read("resources/TL_SCCO_EMD.json", what = "sp")
cols <- colorFactor(topo.colors(nrow(mhSPDF)), mhSPDF$NAME_2)
leaflet() %>% addProviderTiles(providers$Stamen.TonerLite) %>%
setView(75.7139, 19.7515, 6) %>%
addPolygons(data = mhSPDF, opacity = 5,
label = ~NAME_2, weight = 1,
fillColor = ~cols(NAME_2))
library(leaflet)
library(sp)
#' <br/><br/>
#' The V8 part is simply to read the JSON embeded in the Javascript.<br/>
#' For a geojson file `jsonlite::fromfromJSON()` or `geojsonio::regeojson_read()` will do
#'
jsURL <- "https://rawgit.com/Norkart/Leaflet-MiniMap/master/example/local_pubs_restaurant_norway.js"
v8 <- V8::v8()
v8$source(jsURL)
geoJson <- geojsonio::as.json(v8$get("pubsGeoJSON"))
# This is the kicker, convert geojson to a Spatial object.
# This then allows us to use formulas in our markers, polygons etc.
spdf <- geojsonio::geojson_sp(geoJson)
icons <- awesomeIconList(
pub = makeAwesomeIcon(icon = "glass", library = "fa", markerColor = "red"),
restaurant = makeAwesomeIcon(icon = "cutlery", library = "fa", markerColor = "blue")
)
leaflet() %>% addTiles() %>%
setView(10.758276373601069, 59.92448055859924, 13) %>%
addAwesomeMarkers(data = spdf,
label = ~stringr::str_c(amenity, ": ", name),
icon = ~icons[amenity],
options = markerOptions(riseOnHover = TRUE, opacity = 0.75),
group = "pubs")
#' <br/><br/>
#' Another examples this time with polygons
url <- "http://www.partners-popdev.org/wp-content/themes/original-child/vendor/Geojson/States/Maharashtra.geojson"
# mhSPDF <- geojsonio::geojson_read(url, what = "sp")
mhSPDF <- geojsonio::geojson_read("resources/TL_SCCO_EMD.json", what = "sp")
#cols <- colorFactor(topo.colors(nrow(mhSPDF)), mhSPDF$NAME_2)
cols <- colorFactor(topo.colors(nrow(mhSPDF)), mhSPDF$EMD_ENG_NM)
leaflet() %>% addProviderTiles(providers$Stamen.TonerLite) %>%
setView(75.7139, 19.7515, 6) %>%
addPolygons(data = mhSPDF, opacity = 5,
label = ~NAME_2, weight = 1,
fillColor = ~cols(NAME_2))
library(leaflet)
library(sp)
#' <br/><br/>
#' The V8 part is simply to read the JSON embeded in the Javascript.<br/>
#' For a geojson file `jsonlite::fromfromJSON()` or `geojsonio::regeojson_read()` will do
#'
jsURL <- "https://rawgit.com/Norkart/Leaflet-MiniMap/master/example/local_pubs_restaurant_norway.js"
v8 <- V8::v8()
v8$source(jsURL)
geoJson <- geojsonio::as.json(v8$get("pubsGeoJSON"))
# This is the kicker, convert geojson to a Spatial object.
# This then allows us to use formulas in our markers, polygons etc.
spdf <- geojsonio::geojson_sp(geoJson)
icons <- awesomeIconList(
pub = makeAwesomeIcon(icon = "glass", library = "fa", markerColor = "red"),
restaurant = makeAwesomeIcon(icon = "cutlery", library = "fa", markerColor = "blue")
)
leaflet() %>% addTiles() %>%
setView(10.758276373601069, 59.92448055859924, 13) %>%
addAwesomeMarkers(data = spdf,
label = ~stringr::str_c(amenity, ": ", name),
icon = ~icons[amenity],
options = markerOptions(riseOnHover = TRUE, opacity = 0.75),
group = "pubs")
#' <br/><br/>
#' Another examples this time with polygons
url <- "http://www.partners-popdev.org/wp-content/themes/original-child/vendor/Geojson/States/Maharashtra.geojson"
# mhSPDF <- geojsonio::geojson_read(url, what = "sp")
mhSPDF <- geojsonio::geojson_read("resources/TL_SCCO_EMD.json", what = "sp")
#cols <- colorFactor(topo.colors(nrow(mhSPDF)), mhSPDF$NAME_2)
cols <- colorFactor(topo.colors(nrow(mhSPDF)), mhSPDF$EMD_ENG_NM)
leaflet() %>% addProviderTiles(providers$Stamen.TonerLite) %>%
setView(75.7139, 19.7515, 6) %>%
addPolygons(data = mhSPDF, opacity = 5,
label = ~NAME_2, weight = 1,
fillColor = ~cols(NAME_2))
library(leaflet)
library(sp)
#' <br/><br/>
#' The V8 part is simply to read the JSON embeded in the Javascript.<br/>
#' For a geojson file `jsonlite::fromfromJSON()` or `geojsonio::regeojson_read()` will do
#'
jsURL <- "https://rawgit.com/Norkart/Leaflet-MiniMap/master/example/local_pubs_restaurant_norway.js"
v8 <- V8::v8()
v8$source(jsURL)
geoJson <- geojsonio::as.json(v8$get("pubsGeoJSON"))
# This is the kicker, convert geojson to a Spatial object.
# This then allows us to use formulas in our markers, polygons etc.
spdf <- geojsonio::geojson_sp(geoJson)
icons <- awesomeIconList(
pub = makeAwesomeIcon(icon = "glass", library = "fa", markerColor = "red"),
restaurant = makeAwesomeIcon(icon = "cutlery", library = "fa", markerColor = "blue")
)
leaflet() %>% addTiles() %>%
setView(10.758276373601069, 59.92448055859924, 13) %>%
addAwesomeMarkers(data = spdf,
label = ~stringr::str_c(amenity, ": ", name),
icon = ~icons[amenity],
options = markerOptions(riseOnHover = TRUE, opacity = 0.75),
group = "pubs")
#' <br/><br/>
#' Another examples this time with polygons
url <- "http://www.partners-popdev.org/wp-content/themes/original-child/vendor/Geojson/States/Maharashtra.geojson"
# mhSPDF <- geojsonio::geojson_read(url, what = "sp")
mhSPDF <- geojsonio::geojson_read("resources/TL_SCCO_EMD.json", what = "sp")
#cols <- colorFactor(topo.colors(nrow(mhSPDF)), mhSPDF$NAME_2)
cols <- colorFactor(topo.colors(nrow(mhSPDF)), mhSPDF$EMD_ENG_NM)
leaflet() %>% addProviderTiles(providers$Stamen.TonerLite) %>%
setView(75.7139, 19.7515, 6) %>%
addPolygons(data = mhSPDF, opacity = 5,
# label = ~NAME_2, weight = 1,
# fillColor = ~cols(NAME_2))
label = ~EMD_ENG_NM, weight = 1,
fillColor = ~cols(EMD_ENG_NM))
