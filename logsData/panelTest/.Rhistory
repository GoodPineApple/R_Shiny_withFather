addPolygons(data = mhSPDF, opacity = 5,
# label = ~NAME_2, weight = 1,
# fillColor = ~cols(NAME_2))
label = ~adm_cd, weight = 1,
fillColor = ~cols(adm_cd))
library(leaflet)
library(sp)
# mhSPDF <- geojsonio::geojson_read(url, what = "sp")
mhSPDF <- geojsonio::geojson_read("resources/TL_SCCO_EMD.geojson", what = "sp")
#cols <- colorFactor(topo.colors(nrow(mhSPDF)), mhSPDF$NAME_2)
cols <- colorFactor(topo.colors(nrow(mhSPDF)), mhSPDF$adm_nm)
leaflet() %>% addProviderTiles(providers$Stamen.TonerLite) %>%
setView(127.38, 36.35, 6) %>%
addPolygons(data = mhSPDF, opacity = 5,
# label = ~NAME_2, weight = 1,
# fillColor = ~cols(NAME_2))
label = ~adm_nm, weight = 1,
fillColor = ~cols(adm_nm))
library(leaflet)
library(sp)
#' <br/><br/>
#' The V8 part is simply to read the JSON embeded in the Javascript.<br/>
#' For a geojson file `jsonlite::fromfromJSON()` or `geojsonio::regeojson_read()` will do
#'
jsURL <- "https://rawgit.com/Norkart/Leaflet-MiniMap/master/example/local_pubs_restaurant_norway.js"
v8 <- V8::v8()
v8$source(jsURL)
geoJson <- geojsonio::as.json(v8$get("pubsGeoJSON"))
# This is the kicker, convert geojson to a Spatial object.
# This then allows us to use formulas in our markers, polygons etc.
spdf <- geojsonio::geojson_sp(geoJson)
icons <- awesomeIconList(
pub = makeAwesomeIcon(icon = "glass", library = "fa", markerColor = "red"),
restaurant = makeAwesomeIcon(icon = "cutlery", library = "fa", markerColor = "blue")
)
leaflet() %>% addTiles() %>%
setView(10.758276373601069, 59.92448055859924, 13) %>%
addAwesomeMarkers(data = spdf,
label = ~stringr::str_c(amenity, ": ", name),
icon = ~icons[amenity],
options = markerOptions(riseOnHover = TRUE, opacity = 0.75),
group = "pubs")
#' <br/><br/>
#' Another examples this time with polygons
url <- "http://www.partners-popdev.org/wp-content/themes/original-child/vendor/Geojson/States/Maharashtra.geojson"
# mhSPDF <- geojsonio::geojson_read(url, what = "sp")
mhSPDF <- geojsonio::geojson_read("resources/TL_SCCO_EMD.json", what = "sp")
#cols <- colorFactor(topo.colors(nrow(mhSPDF)), mhSPDF$NAME_2)
cols <- colorFactor(topo.colors(nrow(mhSPDF)), mhSPDF$OBJECTID)
leaflet() %>% addProviderTiles(providers$Stamen.TonerLite) %>%
setView(127.38, 36.35, 6) %>%
addPolygons(data = mhSPDF, opacity = 5,
# label = ~NAME_2, weight = 1,
# fillColor = ~cols(NAME_2))
label = ~OBJECTID, weight = 1,
fillColor = ~cols(OBJECTID))
library(leaflet)
library(sp)
# mhSPDF <- geojsonio::geojson_read(url, what = "sp")
mhSPDF <- geojsonio::geojson_read("resources/TL_SCCO_EMD.geojson", what = "sp")
#cols <- colorFactor(topo.colors(nrow(mhSPDF)), mhSPDF$NAME_2)
cols <- colorFactor(topo.colors(nrow(mhSPDF)), mhSPDF$adm_nm
)
leaflet() %>% addProviderTiles(providers$Stamen.TonerLite) %>%
setView(127.38, 36.35, 6) %>%
addPolygons(data = mhSPDF, opacity = 5,
# label = ~NAME_2, weight = 1,
# fillColor = ~cols(NAME_2))
label = ~adm_nm, weight = 1,
fillColor = ~cols(adm_nm))
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(flexdashboard)
library(leaflet)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(flexdashboard)
library(leaflet)
df<-read.csv('cctv_clean.csv',header = T)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(flexdashboard)
library(leaflet)
df<-read.csv('cctv_clean.csv',header = T)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(flexdashboard)
library(leaflet)
library(geojsonio)
cctv<-read.csv('resources/cctv_clean.csv',header = T)
geoJson <- geojsonio::geojson_read("resources/TL_SCCO_EMD.json" , what = "sp")
ui <- pageWithSidebar(
headerPanel(
flowLayout(
"1","2","3","4"
)
),
mainPanel(
"main panel",
leafletOutput("theMap")
),
navlistPanel(
tabPanel("a",NULL),
tabPanel("a",NULL),
tabPanel("a",NULL)
)
)
server <- function(input, output){
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
#df = data.frame(Lat = 1:10, Long = rnorm(10))
output$theMap <- renderLeaflet({
leaflet(options = leafletOptions(
#maxZoom=12
# ,attributionControl = T
# ,zoomControl = F1
)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik,
options = providerTileOptions(noWrap = TRUE)
) %>%
#addMarkers(data = cbind(127.38, 36.35))
#addMarkers(lng=127.38, lat=36.35)
addCircles(data=df, radius=10, lng=~LNG, lat=~LAT)
})
}
shinyApp(ui=ui, server=server)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(flexdashboard)
library(leaflet)
library(geojsonio)
cctv<-read.csv('resources/cctv_clean.csv',header = T)
geoJson <- geojsonio::geojson_read("resources/TL_SCCO_EMD.json" , what = "sp")
ui <- pageWithSidebar(
headerPanel(
flowLayout(
"1","2","3","4"
)
),
mainPanel(
"main panel",
leafletOutput("theMap")
),
navlistPanel(
tabPanel("a",NULL),
tabPanel("a",NULL),
tabPanel("a",NULL)
)
)
server <- function(input, output){
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
#df = data.frame(Lat = 1:10, Long = rnorm(10))
# output$theMap <- renderLeaflet({
#   leaflet(options = leafletOptions(
#       #maxZoom=12
#       # ,attributionControl = T
#       # ,zoomControl = F1
#     )) %>%
#     addProviderTiles(providers$OpenStreetMap.Mapnik,
#       options = providerTileOptions(noWrap = TRUE)
#     ) %>%
#     #addMarkers(data = cbind(127.38, 36.35))
#     #addMarkers(lng=127.38, lat=36.35)
#     addCircles(data=df, radius=10, lng=~LNG, lat=~LAT)
# })
}
shinyApp(ui=ui, server=server)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(flexdashboard)
library(leaflet)
library(geojsonio)
cctv<-read.csv('resources/cctv_clean.csv',header = T)
geoJson <- geojsonio::geojson_read("resources/TL_SCCO_EMD.json" , what = "sp")
ui <- pageWithSidebar(
headerPanel(
flowLayout(
"1","2","3","4"
)
),
mainPanel(
"메인",
leafletOutput("theMap")
),
navlistPanel(
tabPanel("a",NULL),
tabPanel("a",NULL),
tabPanel("a",NULL)
)
)
server <- function(input, output){
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
#df = data.frame(Lat = 1:10, Long = rnorm(10))
# output$theMap <- renderLeaflet({
#   leaflet(options = leafletOptions(
#       #maxZoom=12
#       # ,attributionControl = T
#       # ,zoomControl = F1
#     )) %>%
#     addProviderTiles(providers$OpenStreetMap.Mapnik,
#       options = providerTileOptions(noWrap = TRUE)
#     ) %>%
#     #addMarkers(data = cbind(127.38, 36.35))
#     #addMarkers(lng=127.38, lat=36.35)
#     addCircles(data=df, radius=10, lng=~LNG, lat=~LAT)
# })
}
shinyApp(ui=ui, server=server)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(flexdashboard)
library(leaflet)
library(geojsonio)
cctv<-read.csv('resources/cctv_clean.csv',header = T)
geoJson <- geojsonio::geojson_read("resources/TL_SCCO_EMD.json" , what = "sp")
ui <- pageWithSidebar(
headerPanel(
flowLayout(
"1","2","3","4"
)
),
mainPanel(
"메인",
leafletOutput("theMap")
),
navlistPanel(
tabPanel("첫번째",NULL),
tabPanel("두번째",NULL),
tabPanel("세번째",NULL)
)
)
server <- function(input, output){
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
#df = data.frame(Lat = 1:10, Long = rnorm(10))
# output$theMap <- renderLeaflet({
#   leaflet(options = leafletOptions(
#       #maxZoom=12
#       # ,attributionControl = T
#       # ,zoomControl = F1
#     )) %>%
#     addProviderTiles(providers$OpenStreetMap.Mapnik,
#       options = providerTileOptions(noWrap = TRUE)
#     ) %>%
#     #addMarkers(data = cbind(127.38, 36.35))
#     #addMarkers(lng=127.38, lat=36.35)
#     addCircles(data=df, radius=10, lng=~LNG, lat=~LAT)
# })
}
shinyApp(ui=ui, server=server)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(flexdashboard)
library(leaflet)
library(geojsonio)
cctv<-read.csv('resources/cctv_clean.csv',header = T)
geoJson <- geojsonio::geojson_read("resources/TL_SCCO_EMD.json" , what = "sp")
ui <- pageWithSidebar(
headerPanel(
flowLayout(
"1","2","3","4"
)
),
mainPanel(
"메인",
leafletOutput("theMap")
),
navlistPanel(
tabPanel("첫번째",NULL),
tabPanel("두번째",NULL),
tabPanel("세번째",NULL)
)
)
server <- function(input, output){
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
cctv = data.frame(Lat = 1:10, Long = rnorm(10))
output$theMap <- renderLeaflet({
leaflet(options = leafletOptions(
#maxZoom=12
# ,attributionControl = T
# ,zoomControl = F1
)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik,
options = providerTileOptions(noWrap = TRUE)
) %>%
#addMarkers(data = cbind(127.38, 36.35))
#addMarkers(lng=127.38, lat=36.35)
addCircles(data=cctv, radius=10, lng=~LNG, lat=~LAT)
})
}
shinyApp(ui=ui, server=server)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(flexdashboard)
library(leaflet)
library(geojsonio)
cctv<-read.csv('resources/cctv_clean.csv',header = T)
geoJson <- geojsonio::geojson_read("resources/TL_SCCO_EMD.json" , what = "sp")
ui <- pageWithSidebar(
headerPanel(
flowLayout(
"1","2","3","4"
)
),
mainPanel(
"메인",
leafletOutput("theMap")
),
navlistPanel(
tabPanel("첫번째",NULL),
tabPanel("두번째",NULL),
tabPanel("세번째",NULL)
)
)
server <- function(input, output){
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
cctv = data.frame(Lat = 1:10, Long = rnorm(10))
output$theMap <- renderLeaflet({
leaflet(options = leafletOptions(
#maxZoom=12
# ,attributionControl = T
# ,zoomControl = F1
)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik,
options = providerTileOptions(noWrap = TRUE)
) %>%
#addMarkers(data = cbind(127.38, 36.35))
#addMarkers(lng=127.38, lat=36.35)
addCircles(data=cctv, radius=10, lng=~LNG, lat=~LAT)
})
}
shinyApp(ui=ui, server=server)
options(encoding = "UTF-8")
setwd("/srv/shiny-server/test")
options(encoding = "UTF-8")
library(shiny)
library(flexdashboard)
library(leaflet)
df<-read.csv('cctv_clean.csv',header = T)
options(encoding = "UTF-8")
library(shiny)
library(flexdashboard)
library(leaflet)
df<-read.csv('/resources/cctv_clean.csv',header = T)
options(encoding = "UTF-8")
library(shiny)
library(flexdashboard)
library(leaflet)
df<-read.csv('resources/cctv_clean.csv',header = T)
ui <- pageWithSidebar(
headerPanel(
flowLayout(
"1","2","3","4"
)
),
mainPanel(
"main panel",
leafletOutput("theMap")
),
# mainPanel(
# tabsetPanel(
#   tabPanel("Plot", plotOutput("plot")),
#   tabPanel("Summary", verbatimTextOutput("summary")),
#   tabPanel("Table", tableOutput("table"))
# )
#sidebarPanel(
navlistPanel(
tabPanel("a",NULL),
tabPanel("a",NULL),
tabPanel("a",NULL)
)
#)
)
server <- function(input, output){
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
#df = data.frame(Lat = 1:10, Long = rnorm(10))
output$theMap <- renderLeaflet({
leaflet(options = leafletOptions(
#maxZoom=12
# ,attributionControl = T
# ,zoomControl = F1
)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik,
options = providerTileOptions(noWrap = TRUE)
) %>%
#addMarkers(data = cbind(127.38, 36.35))
#addMarkers(lng=127.38, lat=36.35)
addCircles(data=df, radius=10, lng=~LNG, lat=~LAT)
})
}
shinyApp(ui=ui, server=server)
한글입력 되자나
options(encoding = "UTF-8")
library(shiny)
library(flexdashboard)
library(leaflet)
df<-read.csv('resources/cctv_clean.csv',header = T)
ui <- pageWithSidebar(
headerPanel(
flowLayout(
"1","2","3","4"
)
),
mainPanel(
"main panel",
leafletOutput("theMap")
),
# mainPanel(
# tabsetPanel(
#   tabPanel("Plot", plotOutput("plot")),
#   tabPanel("Summary", verbatimTextOutput("summary")),
#   tabPanel("Table", tableOutput("table"))
# )
#sidebarPanel(
navlistPanel(
tabPanel("a",NULL),
tabPanel("a",NULL),
tabPanel("a",NULL)
)
#)
)
server <- function(input, output){
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
#df = data.frame(Lat = 1:10, Long = rnorm(10))
output$theMap <- renderLeaflet({
leaflet(options = leafletOptions(
#maxZoom=12
# ,attributionControl = T
# ,zoomControl = F1
)) %>%
addProviderTiles(providers$OpenStreetMap.Mapnik,
options = providerTileOptions(noWrap = TRUE)
) %>%
#addMarkers(data = cbind(127.38, 36.35))
#addMarkers(lng=127.38, lat=36.35)
addCircles(data=df, radius=10, lng=~LNG, lat=~LAT)
})
}
shinyApp(ui=ui, server=server)
library(leaflet)
library(sp)
options(encoding = "UTF-8")
# mhSPDF <- geojsonio::geojson_read(url, what = "sp")
mhSPDF <- geojsonio::geojson_read("resources/TL_SCCO_EMD.geojson", what = "sp")
#cols <- colorFactor(topo.colors(nrow(mhSPDF)), mhSPDF$NAME_2)
cols <- colorFactor(topo.colors(nrow(mhSPDF)), mhSPDF$adm_nm
)
leaflet() %>% addProviderTiles(providers$Stamen.TonerLite) %>%
setView(127.38, 36.35, 6) %>%
addPolygons(data = mhSPDF, opacity = 5,
# label = ~NAME_2, weight = 1,
# fillColor = ~cols(NAME_2))
label = ~adm_nm, weight = 1,
fillColor = ~cols(adm_nm))
library(leaflet)
library(sp)
options(encoding = "UTF-8")
# mhSPDF <- geojsonio::geojson_read(url, what = "sp")
mhSPDF <- geojsonio::geojson_read("resources/TL_SCCO_EMD.geojson", what = "sp")
#cols <- colorFactor(topo.colors(nrow(mhSPDF)), mhSPDF$NAME_2)
cols <- colorFactor(topo.colors(nrow(mhSPDF)), mhSPDF$adm_nm
)
leaflet() %>% addProviderTiles(providers$Stamen.TonerLite) %>%
setView(127.38, 36.35, 6) %>%
addPolygons(data = mhSPDF, opacity = 5,
# label = ~NAME_2, weight = 1,
# fillColor = ~cols(NAME_2))
label = ~adm_nm, weight = 1,
fillColor = ~cols(adm_nm))
library(leaflet)
library(sp)
options(encoding = "UTF-8")
# mhSPDF <- geojsonio::geojson_read(url, what = "sp")
mhSPDF <- geojsonio::geojson_read("resources/TL_SCCO_EMD.geojson", what = "sp")
#cols <- colorFactor(topo.colors(nrow(mhSPDF)), mhSPDF$NAME_2)
cols <- colorFactor(topo.colors(nrow(mhSPDF)), mhSPDF$adm_cd)
leaflet() %>% addProviderTiles(providers$Stamen.TonerLite) %>%
setView(127.38, 36.35, 6) %>%
addPolygons(data = mhSPDF, opacity = 5,
# label = ~NAME_2, weight = 1,
# fillColor = ~cols(NAME_2))
label = ~adm_cd, weight = 1,
fillColor = ~cols(adm_cd))
library(leaflet)
library(sp)
options(encoding = "UTF-8")
# mhSPDF <- geojsonio::geojson_read(url, what = "sp")
mhSPDF <- geojsonio::geojson_read("resources/TL_SCCO_EMD0.geojson", what = "sp")
#cols <- colorFactor(topo.colors(nrow(mhSPDF)), mhSPDF$NAME_2)
cols <- colorFactor(topo.colors(nrow(mhSPDF)), mhSPDF$adm_cd)
leaflet() %>% addProviderTiles(providers$Stamen.TonerLite) %>%
setView(127.38, 36.35, 6) %>%
addPolygons(data = mhSPDF, opacity = 5,
# label = ~NAME_2, weight = 1,
# fillColor = ~cols(NAME_2))
label = ~adm_cd, weight = 1,
fillColor = ~cols(adm_cd))
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
