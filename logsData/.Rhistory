library(stringr)
library(stringr)
cctv<-read.csv('drv_wonwoo_101_10.log')
splitPtzLog <- function(data) {
return (str_match(data, pattern = '^([^ ]+) +([^ ]+) +([^ ]+) +([^ ]+) +(.+)$')[2:6])
}
cctv[1]
cctv[2]
Map(splitPtzLog, cctv)
Map(splitPtzLog, cctv[1])
Map({function(a)a}, cctv[1])
Map({function(a)a}, cctv)
Map({function(a)a}, cctv)
cctv
View(cctv)
cctv<-read.csv('drv_wonwoo_101_10.log',sep='')
View(cctv)
cctv<-read.csv('drv_wonwoo_101_10.log',sep='!@')
cctv<-read.csv('drv_wonwoo_101_10.log',sep='#')
cctv
View(cctv)
cctv<-read.csv('drv_wonwoo_101_10.log',sep='#',header=FALSE)
View(cctv)
Map({function(row) 1}, cctv)
Map({function(row) 1}, cctv[1])
splitPtzLog(cctv)
cctv+1
str_match(cctv,'a')
dmap
library(purr)
install.packages('perr')
install.packages('purr')
install.packages('purrr')
library(purrr)
dmap
typeof(cctv)
typeof(cctv[1])
typeof(cctv[[1]]\)
typeof(cctv[[1]])
typeof(cctv[1][1])
typeof(cctv[1][2])
cctv[1][1]
cctv[[1]]
typeof(cctv[[1]])
read.csv2('drv_wonwoo_101_10.log',sep='#',header=F)
library(stringr)
setwd('d:/logsData')
library(stringr)
setwd('d:\logsData')
library(stringr)
setwd('d:/logsData')
getw()
getwd()
setwd('d:/logsData')
getwd()
read.csv2('drv_wonwoo_101_10.log',sep='#',header=F)
cctv=read.csv2('drv_wonwoo_101_10.log',sep='#',header=F)
typeof(cctv)
data.frame(cctv)
typeof(data.frame(cctv))
cctv=read.csv('drv_wonwoo_101_10.log',sep='#',header=F)
cctv[1]
cctv[2]
names(cctv)
cctv$V1
Map({fuction(a) a},cctv$V1)
Map({function(a) a},cctv$V1)
Map(splitPtzLog,cctv$V1)
Map(splitPtzLog,cctv[1])
Map(splitPtzLog,cctv$V1)
cctv[1]
cctv$V1
typeof(cctv[1])
typeof(cctv$V1)
typeof(cctv[[1]])
typeof(cctv[[1]][1])
(cctv[[1]][1])
(cctv[[1]][2])
splitPtzLog <- function(data) {
return (str_match(data, pattern = '^([^ ]+) +([^ ]+) +([^ ]+) +([^ ]+) +(.+)$')[2:6])
}
cctv_split<-Map(splitPtzLog, cctv[[1]])
View(cctv_split)
cctv_split<-Map(splitPtzLog, cctv[[1]])
cctv_split<-Map(splitPtzLog, cctv$V1)
cctv_split
View(cctv_split)
cctv_split[[1]]
cctv_split[[2]]
unlist(cctv_split)
data.frame(cctv_split)
View(data.frame(cctv_split))
View(data.frame(cctv_split, byrow=T))
View(data.frame(cctv_split, byrow=F))
data.frame(cctv_split, byrow=FALSE)
data.frame(cctv_split)
?data.frame
map
map(cctv,{function(a)a})
map(cctv,splitPtzLog)
map(cctv$V1,splitPtzLog)
View(map(cctv$V1,splitPtzLog))
View(cctv_split)
data.frame(cctv_split$V1)
data.frame(cctv_split[[1]])
data.frame(cctv_split[1)
data.frame(cctv_split[1])
cctv_split
cctv_split[``]
cctv_split[1]
cctv_split[2]
cctv_split[1][1]
cctv_split[2][1]
cctv_split[2]
cctv_split[[2]]
data.frame(cctv_split[1])
data.frame(cctv_split[[1]])
data.frame(cctv_split)
data.frame(cctv_split).transpose()
t
t(data.frame(cctv_split))
View(t(data.frame(cctv_split)))
splitPtzLog <- function(data) {
return (str_match(data, pattern = '^([^ ]+) +([^ ]+) +([^ ]+) +([^ ]+) +(.+)$')[2:6])
}
cctv_split<-Map(splitPtzLog, cctv[[1]])
cctv_clean<-t(data.frame(cctv_split))
View(cctv_clean)
splitPtzLog <- function(data) {
return (str_match(data, pattern = '^([^ ]+) +([^ ]+) +([^ ]+) +([^ ]+) +(.+)$')[2:6])
}
cctv_split<-Map(splitPtzLog, cctv[[1]])
cctv_clean<-t(data.frame(cctv_split))[2:6]
cctv_clean
splitPtzLog <- function(data) {
return (str_match(data, pattern = '^([^ ]+) +([^ ]+) +([^ ]+) +([^ ]+) +(.+)$')[2:6])
}
cctv_split<-Map(splitPtzLog, cctv[[1]])
cctv_clean<-t(data.frame(cctv_split))
cctv_split
cctv_split
cctv_clean
View(cctv_clean)
cctv_clean[1]
cctv_clean<-t(data.frame(cctv_split),row.names=F)
cctv_clean<-t(data.frame(cctv_split),row.names=())
cctv_clean<-t(data.frame(cctv_split),row.names=c())
cctv_clean<-t(data.frame(cctv_split),row.names=NA)
names(cctv_clean)
View(cctv_clean)
edit(cctv_clean)
edit(cctv_clean)
splitPtzLog <- function(data) {
return (str_match(data, pattern = '^([^ ]+) +([^ ]+) +([^ ]+) +([^ ]+) +(.+)$'))
}
cctv_split<-Map(splitPtzLog, cctv[[1]])
cctv_clean<-t(data.frame(cctv_split))
edit(cctv_clean)
splitPtzLog <- function(data) {
return (str_match(data, pattern = '^([^ ]+) +([^ ]+) +([^ ]+) +([^ ]+) +(.+)$')[2:6])
}
cctv_split<-Map(splitPtzLog, cctv[[1]])
cctv_clean<-t(data.frame(cctv_split))
edit(cctv_split)
edit(data.frame(cctv_split))
edit(data.frame(cctv_split,row.names = NULL))
edit(data.frame(cctv_split,colnames(NULL)))
edit(data.frame(cctv_split,colnames=NULL)
)
View(cctv_split)
View(cctv_split)
cctv_clean
cctv_clean[1]
cctv_clean[2]
edit(cctv_clean)
edit(data.frame(cctv_split ))
edit(data.frame(cctv_split ))
?t
edit(data.frame(cctv_split ))
edit(t(data.frame(cctv_split )))
edit(data.frame(cctv_split ))
t(data.frame(cctv_split ))
View(t(data.frame(cctv_split )))
edit(t(data.frame(cctv_split )))
View(cctv_clean)
names(cctv_clean)
row.names(cctv_clean)
row.names(cctv_clean)=NULL
row.names(cctv_clean)
splitPtzLog <- function(data) {
return (str_match(data, pattern = '^([^ ]+) +([^ ]+) +([^ ]+) +([^ ]+) +(.+)$')[2:6])
}
cctv_split<-Map(splitPtzLog, cctv[[1]])
cctv_clean<-t(data.frame(cctv_split))
row.names(cctv_clean) = NULL
edit(cctv_clean)
write.csv(cctv_clean, file = 'ptz_clean.csv');
grep('a','bac')
grep('a','bbc')
cctv_clean[5]
cctv_clean[5][2]
cctv_clean[1]
edit(cctv_clean)
cctv_clean$col``
cctv_clean$col1
names(cctv_clean)=c('date','type', 'source', 'line', 'log')
View (cctv_clean)
edit(cctv_clean)
colnames(cctv_clean)=c('date','type', 'source', 'line', 'log')
View(cctv_clean)
cctv_clean[grep(' serial:',cctv_clean$log)]
cctv_clean
splitPtzLog <- function(data) {
return (str_match(data, pattern = '^([^ ]+) +([^ ]+) +([^ ]+) +([^ ]+) +(.+)$')[2:6])
}
cctv_split<-Map(splitPtzLog, cctv[[1]])
cctv_clean<-t(data.frame(cctv_split))
row.names(cctv_clean) = NULL
colnames(cctv_clean)=c('date','type', 'source', 'line', 'log')
View(cctv_clean)
cctv_clean$lo
cctv_clean$log
typeof(cctv_clean)
cctv_clean[1]
cctv_clean[[1]
]
cctv_clean[[2]]
edit(cctv_clean)
library(stringr)
setwd('d:/logsData')
cctv<-read.csv('drv_wonwoo_101.log',sep='#',header=FALSE)
splitPtzLog <- function(data) {
return (str_match(data, pattern = '^([^ ]+) +([^ ]+) +([^ ]+) +([^ ]+) +(.+)$')[2:6])
}
cctv_split<-Map(splitPtzLog, cctv[[1]])
cctv_clean<-t(data.frame(cctv_split))
row.names(cctv_clean) = NULL
colnames(cctv_clean)=c('date','type', 'source', 'line', 'log')
write.csv(cctv_clean, file = 'ptz_clean.csv', header=TRUE);
write.csv(cctv_clean, file = 'ptz_clean.csv');
write.csv(cctv_clean, file = 'ptz_clean2.csv');
library(shiny)
runExample('')
runExample('01_hello')
runExample('01_hello')
setwd('D:\taemin\R\R_Shiny_withFather')
setwd('D:/taemin/R/R_Shiny_withFather')
runExample("08_html")
setwd('D:/logsData/')
